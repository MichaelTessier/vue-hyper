name: Production

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ID }}

on:
  push:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18]
    outputs:
      admin: ${{ steps.filter.outputs.admin }}
      components: ${{ steps.filter.outputs.components }}
    steps:
    - uses: actions/checkout@v4
    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: filter
      with:
        base: HEAD
        filters: |
          admin:
            - 'apps/admin/**'
          components:
            - 'packages/components/**'
  
  ## required for all workflows
  install-components:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install
        with:
          node_version: ${{ matrix.node }}
          context: components

  ## Components Workflow
  deploy-components-production:
    runs-on: ubuntu-latest
    needs: [changes, install-components]
    if: ${{ needs.changes.outputs.components == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Link admin to Vercel
        run: VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_COMPONENT_ID }} vercel link --cwd ./packages/components --yes --token=${{ secrets.VERCEL_TOKEN }}
      - name: Pull Vercel Environment Information
        run: VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_COMPONENT_ID }} vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_COMPONENT_ID }} vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_COMPONENT_ID }} vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
  
  ## Admin Workflow
  build-components:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18]
    needs: [changes, install-components]
    if: ${{ needs.changes.outputs.admin == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-components
        with:
          node_version: ${{ matrix.node }}
  
  install-admin:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18]
    needs: [build-components]
    if: ${{ needs.changes.outputs.admin == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/install
        with:
          node_version: ${{ matrix.node }}
          context: admin

  deploy-admin-production:
    runs-on: ubuntu-latest
    needs: [changes, install-admin]
    if: ${{ needs.changes.outputs.admin == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Link admin to Vercel
        run: VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ADMIN_ID }} vercel link --cwd ./apps/admin --yes --token=${{ secrets.VERCEL_TOKEN }}
      - name: Pull Vercel Environment Information
        run: VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ADMIN_ID }} vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ADMIN_ID }} vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: VERCEL_PROJECT_ID=${{ secrets.VERCEL_PROJECT_ADMIN_ID }} vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
